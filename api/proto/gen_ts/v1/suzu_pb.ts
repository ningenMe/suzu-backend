// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file v1/suzu.proto (package suzu.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message suzu.v1.Blog
 */
export class Blog extends Message<Blog> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string date = 2;
   */
  date = "";

  /**
   * @generated from field: string blog_type = 3;
   */
  blogType = "";

  /**
   * @generated from field: string blog_title = 4;
   */
  blogTitle = "";

  constructor(data?: PartialMessage<Blog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "suzu.v1.Blog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blog_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "blog_title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Blog {
    return new Blog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Blog {
    return new Blog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Blog {
    return new Blog().fromJsonString(jsonString, options);
  }

  static equals(a: Blog | PlainMessage<Blog> | undefined, b: Blog | PlainMessage<Blog> | undefined): boolean {
    return proto3.util.equals(Blog, a, b);
  }
}

/**
 * @generated from message suzu.v1.GetBlogResponse
 */
export class GetBlogResponse extends Message<GetBlogResponse> {
  /**
   * @generated from field: repeated suzu.v1.Blog blog_list = 1;
   */
  blogList: Blog[] = [];

  constructor(data?: PartialMessage<GetBlogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "suzu.v1.GetBlogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blog_list", kind: "message", T: Blog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlogResponse {
    return new GetBlogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlogResponse {
    return new GetBlogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlogResponse {
    return new GetBlogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlogResponse | PlainMessage<GetBlogResponse> | undefined, b: GetBlogResponse | PlainMessage<GetBlogResponse> | undefined): boolean {
    return proto3.util.equals(GetBlogResponse, a, b);
  }
}

/**
 * @generated from message suzu.v1.GetHealthResponse
 */
export class GetHealthResponse extends Message<GetHealthResponse> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<GetHealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "suzu.v1.GetHealthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHealthResponse {
    return new GetHealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHealthResponse {
    return new GetHealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHealthResponse {
    return new GetHealthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHealthResponse | PlainMessage<GetHealthResponse> | undefined, b: GetHealthResponse | PlainMessage<GetHealthResponse> | undefined): boolean {
    return proto3.util.equals(GetHealthResponse, a, b);
  }
}

